datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  uid      Int      @id @default(autoincrement())
  username String   @unique
  email   String   @unique
  password    String 
  profile  Profile?
  codeTemplates CodeTemplate[]
  blog Blog[]
  comments Comment[]
  ratings Rating[]
  reports Report[]
  ownedReplies   Reply[]  @relation("owner") 
  replies Reply[] @relation("replier")
}

model AdminRegistrationRequest {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  token     String   @unique
  createdAt DateTime @default(now())
}

model SystemAdmin {
  aid      Int      @id @default(autoincrement())
  email   String   @unique
  password    String 
}

model Profile{
  pid      Int      @id @default(autoincrement())
  email String
  firstName String 
  lastName String 
  avatar String // URL to the profile picture
  phoneNumber String
  uid      Int     @unique
  user        User    @relation(fields: [uid], references: [uid], onDelete: Cascade)
  
}

model CodeTemplate{
  cid Int  @id @default(autoincrement())
  title String
  explanation String?
  language String 
  tags String 
  code String
  uid Int
  
  user        User    @relation(fields: [uid], references: [uid], onDelete: Cascade)
  
  isForked Boolean @default(false)
  ogTemplateId Int?
  forks CodeTemplate[] @relation("ogTemplate")
  
  ogTemplate CodeTemplate? @relation("ogTemplate", fields: [ogTemplateId], references: [cid], onDelete: SetNull)

  blogs Blog[] @relation("BlogCodeTemplates")
}


model Blog{
  bid Int  @id @default(autoincrement())
  title String
  description String
  tags String  
  Hidden Boolean @default(false)
  uid Int

  user        User    @relation(fields: [uid], references: [uid], onDelete: Cascade)

  comments Comment[]
  ratings Rating[]
  reports Report[]

  codeTemplates CodeTemplate[] @relation("BlogCodeTemplates")
}

model Comment{
  commentId Int @id @default(autoincrement())
  bid Int
  uid Int
  content String
  Hidden Boolean @default(false)

  blog Blog @relation(fields: [bid], references: [bid], onDelete: Cascade)
  user User @relation(fields: [uid], references: [uid], onDelete: Cascade)

  ratings Rating[]
  reports Report[]
  replies Reply[]
}

model Reply{
  replyId Int @id @default(autoincrement())
  ownerId Int
  commentId Int
  replierId Int
  content     String 
  Hidden Boolean @default(false)

  comment   Comment @relation(fields: [commentId], references: [commentId], onDelete: Cascade)

  owner User? @relation("owner", fields: [ownerId], references: [uid], onDelete: Cascade)
  replier User? @relation("replier", fields: [replierId], references: [uid], onDelete: Cascade)

  ratings     Rating[]
  reports     Report[]
}

model Rating{
  rateId Int @id @default(autoincrement())
  upvote Boolean @default(false)
  downvote Boolean @default(false)
  uid Int

  bid Int?
  commentId Int?
  replyId Int?

  user User @relation(fields: [uid], references: [uid], onDelete: Cascade)

  blog Blog? @relation(fields: [bid], references: [bid], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  reply Reply? @relation(fields: [replyId], references: [replyId], onDelete: Cascade)

  
  @@unique([uid, bid])
  @@unique([uid, commentId])
  @@unique([uid, replyId])
}

model Report{
  reportId Int @id @default(autoincrement())
  uid Int

  bid Int?
  commentId Int?
  replyId Int?
  explanation String?

  user User @relation(fields: [uid], references: [uid], onDelete: Cascade)

  blog Blog? @relation(fields: [bid], references: [bid], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  reply Reply? @relation(fields: [replyId], references: [replyId], onDelete: Cascade)
}